* Introduction
   My spacemacs configuration layers including dotfile (=.spacemacs=).
   At the start of this project, the configuration is assumed to be used
   with =develop= branch of syl20bnr/spacemacs, however, it's now just fine
   to use =master= branch.

* Installation
   Backup and delete your ~/.emacs and ~/.emacs.d, then go to your =home= directory:

   Well, blah blah blah but let's have elpa-mirror repo locally (see =dsp_init.el=):

   : $ git clone --depth 1 https://github.com/d12frosted/elpa-mirror.git ~/.elpa-mirror

   Then clone spacemacs:

   #+BEGIN_SRC text
   $ git clone https://github.com/syl20bnr/spacemacs.git .emacs.d
   $ cd .emacs.d
   $ git checkout -b develop -t origin/develop
   #+END_SRC

   That's for spacemacs =develop= branch. Now my own configuration, again, at your
   =home= directory:

   #+BEGIN_SRC text
   $ git clone https://github.com/stotok/dotspacemacs.git
   $ ln -s dotspacemacs/.spacemacs .
   #+END_SRC

   Now is time to install *emacs* itself. On Debian based distros (Ubuntu, Mint, etc):

   #+BEGIN_SRC text
   $ apt-get install emacs
   #+END_SRC

   On Windows, install cygwin =emacs-w32= via cygwin installer.

* Private Layers
 The following private layers are configured in =mycontribs/dsp_layers.el=.

** cscope layer (ttk-cscope)
   Support c/c++ and python projects, enable via =ttk-cscope=.
   First, install the following tools (for generating cscope database):

   For c/c++:
   : $ apt-get install cscope

   For python:
   : $ apt-get install pycscope

   Script indexers to select which c/c++ or python files to be indexed is available
   at =mycontribs/ttk-cscope/local/xcscope/=. Modify them according to your needs.

   From the command line, invoke the indexer at the root directory of your source
   tree. To do so, include the script's path into your =PATH= then:

   For c/c++:
   : $ cscope-indexer -r -v

   For python:
   : $ pycscope-indexer -r -v

   Those invocation will generate cscope database file =cscope.out= that can be used by =xcscope.el=.
   You need to invoke the indexer again if your codes got (many) changes.
   Well, that's all. It's now ready to roll.

*** Keybindings
    In c/c++ mode or python mode, place the cursor on function name (or macro, variables,
    etc) of your interest:

    Leader key is:  =SPC m= (or shortcut with =,=)

    Available commands:

    #+BEGIN_SRC test
      "cs" 'cscope-find-this-symbol
      "cd" 'cscope-find-global-definition
      "cc" 'cscope-find-functions-calling-this-function
      "cC" 'cscope-find-called-functions
      "ci" 'cscope-find-files-including-file
      ;;
      "cb" 'cscope-display-buffer
      "cu" 'cscope-pop-mark
      ;;
      "ca" 'cscope-set-initial-directory
      "cA" 'cscope-unset-initial-directory
    #+END_SRC

    In cscope buffer, here's available commands:

    #+BEGIN_SRC test
    [return] 'cscope-select-entry-other-window
    " "      'cscope-show-entry-other-window
    "o"      'cscope-select-entry-one-window
    "q"      'cscope-bury-buffer
    "Q"      'cscope-quit
    "s"      'cscope-find-this-symbol
    "d"      'cscope-find-this-symbol
    "g"      'cscope-find-global-definition
    "c"      'cscope-find-functions-calling-this-function
    "C"      'cscope-find-called-functions
    "t"      'cscope-find-this-text-string
    "f"      'cscope-find-this-file
    "i"      'cscope-find-files-including-file
    "u"      'cscope-pop-mark
    #+END_SRC

** elpy layer (ttk-elpy)
   Support python environment, enable via
   =dotspacemacs-configuration-layers= '(=ttk-elpy=). And make sure you don't enable
   =python= layer in your =.spacemacs=.

   This is practically dinosaur of pycscope :) Don't worry, they can co-exist
   peacefully.

   Couple of things need to setup by you before you can enjoy elpy. First of all,
   install python virtual environment. And some other packages that elpy is
   depending on.

*** Kali Linux
    Kali python executable for python 2.X is *python2* while for python ver 3.X is
    *python3*. So, just juse =shebang= line at your script to indicate which version
    the script intended to run.

**** Install python and pip
     - Python 2.7
       : $ sudo apt install python python-setuptools python-pip

     * Python 3
       : $ sudo apt install python3 python3-setuptools python3-pip

**** Install virtual environment
     * Python 2.7
       : $ sudo -H pip install virtualenv virtualenvwrapper

     * Python 3
       : $ sudo -H pip3 install virtualenv virtualenvwrapper

**** Select which python
     * Python 2.7
       : $ select_python2

     * Python 3
       : $ select_python3

**** Create python virtualenv
     * Python 2.7
       : $ mkvirtualenv elpy -p /usr/bin/python2

     * Python 3
       : $ mkvirtualenv elpy -p /usr/bin/python3

**** The above step would do auto workon
     : $ workon elpy

**** Install these packagess via pip
     * Python 2.7
       : $ pip install jedi flake8 importmagic autopep8 yapf

     * Python 3
       : $ pip3 install jedi flake8 importmagic autopep8 yapf

**** To deactivate current virtualenv
     : $ deactivate

**** For emacs elpy package
     : M-x pyvenv-workon elpy
     : M-x elpy-config

*** Macports
**** Install python and pip
    - Python 2.7
      : $ sudo port install python27
      : $ sudo port install py27-pip
    - Python 3.6
      : $ sudo port install python36
      : $ sudo port install py36-pip
    - Switching between versions
      : $ sudo port select --set python python27
      : $ sudo port select --set python2 python27
      : $ sudo port select --set pip pip27
      or,
      : $ sudo port select --set python python36
      : $ sudo port select --set python3 python36
      : $ sudo port select --set pip pip36
    - List available versions
      : $ port select --list python
      : $ port select --list pip
**** Activate either python and pip 2.7 or 3.6
    Example is activating python and pip 3.6
      : $ sudo port select --set python python36
      : $ sudo port select --set python3 python36
      : $ sudo port select --set pip pip36
**** Install virtual environment
    * virtualenv
      : $ sudo -H pip install virtualenv
    * virtualenvwrapper
      : $ sudo -H pip install virtualenvwrapper
**** Python Select
    Put this in your =.bashrc= on how to select python 2 or 3 (or any other python
    versions in that matter):

    #+BEGIN_SRC bashrc
    function select_python27() {
        if [ -d "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin" ] ; then
            echo "Setting env for system python 2.7 macport."
            # add virtualenv executable into system path
            OLD_PATH=${PATH}
            export PATH="/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin":${OLD_PATH}
            ### update prompt
            export PS1="(py27)${PS1}"
        else
            echo "Python 2.7 macport is not installed!!!"
        fi
        #
        if [ -f /opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh ] ; then
            export WORKON_HOME=${HOME}/.virtenv27
            export PIP_VIRTUALENV_BASE=${WORKON_HOME}
            export PIP_RESPECT_VIRTUALENV=true
            export VIRTUALENVWRAPPER_PYTHON=/opt/local/bin/python2.7
            source /opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh
        else
            echo "Virtualenv is not installed!!!"
        fi
    }
    #
    # python 36
    #
    function select_python36() {
        if [ -d "/opt/local/Library/Frameworks/Python.framework/Versions/3.6/bin" ] ; then
            echo "Setting env for system python 3.6 macport."
            # add virtualenv executable into system path
            OLD_PATH=${PATH}
            export PATH="/opt/local/Library/Frameworks/Python.framework/Versions/3.6/bin":${OLD_PATH}
            ### update prompt
            export PS1="(py36) ${PS1}"
        else
            echo "Python 3.6 macport is not installed!!!"
        fi
        #
        if [ -f /opt/local/Library/Frameworks/Python.framework/Versions/3.6/bin/virtualenvwrapper.sh ] ; then
            export WORKON_HOME=${HOME}/.virtenv36
            export PIP_VIRTUALENV_BASE=${WORKON_HOME}
            export PIP_RESPECT_VIRTUALENV=true
            export VIRTUALENVWRAPPER_PYTHON=/opt/local/bin/python3.6
            source /opt/local/Library/Frameworks/Python.framework/Versions/3.6/bin/virtualenvwrapper.sh
        else
            echo "Virtualenv is not installed!!!"
        fi
    }
    #+END_SRC

    Then you need to source it to take effect:
    : $ source ~/.bashrc

    And finally select python 3.6 environment to be consistent with the activating
    python and pip 3.6 earlier:
    : $ select_python36
**** Python Virtual Environment
    - Create python virtualenv
      : $ mkvirtualenv elpy
    - The above step would do auto workon
      : $ workon elpy
    - Install these packages via pip.
      : $ pip install jedi
      : $ pip install flake8
      : $ pip install importmagic
      : $ pip install autopep8
      : $ pip install yapf
    - To deactivate current virtualenv
      : $ deactivate
    - For emacs elpy package
      : M-x pyvenv-workon elpy
      : M-x elpy-config

    It's now ready. Always do =M-x pyvenv-workon elpy= (or any venv you are working
    on) before you open any python project.
**** Check which python and pip is currently active
    : $ which python
    : /Users/joe/.virtenv36/elpy/bin/python
    : $ which pip
    : /Users/joe/.virtenv36/elpy/bin/pip

*** Cygwin
**** Install python and pip
     From cygwin installer, install:
     - python2 and python3
     - python2-pip and python3-pip
**** Install virtualenv and virtualenvwrapper
     From cygwin terminal (notice: --user):
     : $ pip2.7 install --user virtualenv
     : $ pip2.7 install --user virtualenvwrapper
     : $ pip3.6 install --user virtualenv
     : $ pip3.6 install --user virtualenvwrapper
**** Python Select
     Put this in your .bashrc to select python 2 or 3:

     #+BEGIN_SRC bashrc
      function select_python27() {
          if [ -f "${HOME}/.local/bin/virtualenv" ] ; then
              echo "Add virtualenv executable into system path"
              OLD_PATH=${PATH}
              export PATH="${HOME}/.local/bin":${OLD_PATH}
              ### update prompt
              export PS1="(py27)${PS1}"
          else
              echo "virtualenv is not installed!!!"
          fi
          #
          if [ -f "${HOME}/.local/bin/virtualenvwrapper.sh" ] ; then
              export WORKON_HOME=${HOME}/.virtenv27
              export PIP_VIRTUALENV_BASE=${WORKON_HOME}
              export PIP_RESPECT_VIRTUALENV=true
              export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python2
              export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--python='"$VIRTUALENVWRAPPER_PYTHON"
              source ${HOME}/.local/bin/virtualenvwrapper.sh
          else
              echo "Virtualenv is not installed!!!"
          fi
      }
      ;;
      function select_python36() {
          if [ -f "${HOME}/.local/bin/virtualenv" ] ; then
              echo "Add virtualenv executable into system path"
              OLD_PATH=${PATH}
              export PATH="${HOME}/.local/bin":${OLD_PATH}
              ### update prompt
              export PS1="(py36)${PS1}"
          else
              echo "virtualenv is not installed!!!"
          fi
          #
          if [ -f "${HOME}/.local/bin/virtualenvwrapper.sh" ] ; then
              export WORKON_HOME=${HOME}/.virtenv36
              export PIP_VIRTUALENV_BASE=${WORKON_HOME}
              export PIP_RESPECT_VIRTUALENV=true
              export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.6
              export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--python='"$VIRTUALENVWRAPPER_PYTHON"
              source ${HOME}/.local/bin/virtualenvwrapper.sh
          else
              echo "Virtualenv is not installed!!!"
          fi
      }
     #+END_SRC

    Then you need to source it to take effect:
    : $ source ~/.bashrc

**** Python Virtual Environment
    - Create python virtualenv
      : $ mkvirtualenv elpy
    - The above step would do auto workon
      : $ workon elpy
    - Install these packages via pip
      : $ pip install jedi
      : $ pip install flake8
      : $ pip install importmagic
      : $ pip install autopep8
      : $ pip install yapf
    - To deactivate current virtualenv
      : $ deactivate
    - For emacs elpy package
      : M-x pyvenv-workon elpy
      : M-x elpy-config

    It's now ready. Always do =M-x pyvenv-workon elpy= (or any venv you are working
    on) before you open any python project.


*** Keybindings
    In python mode, place the cursor on function name or macro of your interest:

    Leader key is:  =SPC m= (or shortcut with =,=)

    Available commands:

    #+BEGIN_SRC text
      "es" 'elpy-rgrep-symbol
      "eb" 'rgrep-display-buffer
      "ed" 'elpy-goto-definition
      "eu" 'pop-tag-mark
    #+END_SRC

** rtags layer (ttk-rtags)
   Support c/c++ client server indexer based on clang. Enable it via =ttk-rtags=.
   Yeah, this is dinosaur of cscope :) But again, don't worry because they can
   co-exist peacefully.

   Couple of things need to setup before you can enjoy rtags. First of all, take
   a look at:

       https://github.com/Andersbakken/rtags.git

*** Install *rtags* dependencies:
    This is for Debian based distros:
    : $ sudo apt-get install llvm llvm-dev clang libclang-dev build-essential cmake libssl-dev
    : $ sudo apt-get install libncurses5 libncurses5-dev pkg-config bash-completion lua5.3

*** Build rtags
    We are going to build rtags from git source.

    : $ cd ~/project/emacsen
    : $ git clone --recursive https://github.com/Andersbakken/rtags.git
    : $ cd rtags
    : $ mkdir build
    : $ cd build
    : $ rm CMakeCache.txt (if any)
    : $ cmake -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE ..
    : $ make

    The rtags =rc=, =rdm= and =rp= executables are now generated in =build/bin= directory.
    Update =PATH=:

    : PATH=${PATH}:~/project/emacsen/rtags/build/bin

*** Generate compile_commands.json
    Various tools can generate compile_commands.json,
    ref: https://github.com/Andersbakken/rtags.git
    - =cmake=
      : $ cmake -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE .

*** Indexing project database
    - Start the rtags daemon (=rdm=)
      : $ rdm &
    - Index the rtags project. Go to where the =compile_commands.json=:
      : $ rc -J .
      Do it only once. =rdm= will automatically update the index if there is change in your
      source code.

*** Keybindings
    In C/C++ mode, place the cursor on function name or macro of your interest:

    Leader key is: =SPC m= (or shortcut with =,=)

    Available commands:

    #+BEGIN_SRC text
    "rd" 'rtags-find-symbol-at-point
    "rs" 'rtags-find-all-references-at-point
    "ru" 'rtags-location-stack-back
    "rB" 'rtags-show-rtags-buffer
    "rb" 'rtags-list-results
    #+END_SRC

    In rtags buffer, here's available commands:

    #+BEGIN_SRC text
    [return] 'rtags-select-other-window
    "M-RET"  'rtags-select
    "M-o"    'rtags-show-in-other-window
    "c"      'rtags-select-caller
    "M-c"    'rtags-select-caller-other-window
    "s"      'rtags-show-in-other-window
    "SPC"    'rtags-select-and-remove-rtags-buffer
    "q"      'rtags-bury-or-delete
    "j"      'next-line
    "k"      'previous-line
    "n"      'next-line
    "p"      'previous-line
    #+END_SRC

** Other private layers
   Refer to =~/dotspacemacs/mycontribs/dsp_layers.el= :)

* Misc Stuffs

Interesting stuffs:

1. [[https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org#replacing-text-with-iedit][Replacing text with iedit]]
2. [[https://emacsredux.com/blog/2018/09/29/projectile-goes-turbo/][Projectile goes Turbo]]
3. [[https://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Movement-Commands][CC mode Movement Commands]]
4. [[https://stackoverflow.com/questions/807244/c-compiler-asserts-how-to-implement][C Compile Time Assert]]
5. [[http://www.pixelbeat.org/programming/gcc/static_assert.html][Another C Compile Time Assert]]

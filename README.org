* Introduction
   My spacemacs configuration layers including dotfile (.spacemacs).
   The configuration and setting are tested with 'develop' branch of
   syl20bnr/spacemacs.

* Installation 
   Backup and delete your ~/.emacs and ~/.emacs.d, then go to your =home= directory:

   #+BEGIN_SRC text
   $ git clone https://github.com/syl20bnr/spacemacs.git .emacs.d
   $ cd .emacs.d
   $ git checkout -b develop -t origin/develop
   $ cd ..
   $ git clone https://github.com/stotok/dotspacemacs.git
   $ ln -s dotspacemacs/.spacemacs .
   #+END_SRC

* Contents
** cscope layer (ttk-cscope)
   Support c/c++ and python projects, enable via =ttk-cscope=. First, install these
   tools for generating cscope database:

   For c/c++:
   : $ apt-get install cscope

   For python:
   : $ apt-get install pycscope

   Script indexers to select which c/c++ or python files to be indexed is available
   at =mycontribs/ttk-cscope/local/xcscope/=. Modify them according to your needs.

   From the command line, invoke the indexer at the root directory of your source
   tree. To do so, include the script's path into your =PATH= then:

   For c/c++:
   : $ cscope-indexer -r -v

   For python:
   : $ pycscope-indexer -r -v

   You need to invoke the indexer again if your codes got (many) changes.
   Well, that's all. It's now ready to roll.

*** Keybindings:
    In c/c++ mode or python mode, place the cursor on function name or macro of
    your interest:

    Leader key is:  =SPC m= (or shortcut with =,=)

    Available commands:

    #+BEGIN_SRC test
      "cs" 'cscope-find-this-symbol
      "cd" 'cscope-find-global-definition
      "cc" 'cscope-find-functions-calling-this-function
      "cC" 'cscope-find-called-functions
      "ci" 'cscope-find-files-including-file
      ;;
      "cb" 'cscope-display-buffer
      "cu" 'cscope-pop-mark
      ;;
      "ca" 'cscope-set-initial-directory
      "cA" 'cscope-unset-initial-directory
    #+END_SRC

    In cscope buffer, here's available commands:

    #+BEGIN_SRC test
    [return] 'cscope-select-entry-other-window
    " "      'cscope-show-entry-other-window
    "o"      'cscope-select-entry-one-window
    "q"      'cscope-bury-buffer
    "Q"      'cscope-quit
    "s"      'cscope-find-this-symbol
    "d"      'cscope-find-this-symbol
    "g"      'cscope-find-global-definition
    "c"      'cscope-find-functions-calling-this-function
    "C"      'cscope-find-called-functions
    "t"      'cscope-find-this-text-string
    "f"      'cscope-find-this-file
    "i"      'cscope-find-files-including-file
    "u"      'cscope-pop-mark
   #+END_SRC

** elpy layer (ttk-elpy)
   Support python environment, enable via
   =dotspacemacs-configuration-layers= '(=ttk-elpy=). And make sure you don't enable
   =python= layer.

   This is practically dinosaur of pycscope :) Don't worry, they can co-exist
   peacefully.

   Couple of things need to setup by you before you can enjoy elpy. First of all,
   install python virtual environment. And some other packages that elpy is
   depending on.

*** Python Select
    Put this in your =.bashrc= on how to select python 2 or 3 (or any other python
    versions in that matter):

    #+BEGIN_SRC bashrc
    # sudo apt-get install python-pip
    # sudo pip install virtualenvwrapper
    function select_python2() {
        # update prompt
        export PS1="(py2)${PS1}"
        #
        export WORKON_HOME=${HOME}/.virtenv2
        export PIP_VIRTUALENV_BASE=${WORKON_HOME}
        export PIP_RESPECT_VIRTUALENV=true
        export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
        source /usr/local/bin/virtualenvwrapper.sh
    }
    export -f select_python2
    # sudo apt-get install python3-pip
    # sudo pip3 install virtualenvwrapper
    function select_python3() {
        # update prompt
        export PS1="(py3)${PS1}"
        #
        export WORKON_HOME=${HOME}/.virtenv3
        export PIP_VIRTUALENV_BASE=${WORKON_HOME}
        export PIP_RESPECT_VIRTUALENV=true
        export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
        source /usr/local/bin/virtualenvwrapper.sh
    }
    export -f select_python3
    #+END_SRC

    Then you need to source it to take effect:
    : $ source ~/.bashrc

*** Python Virtual Environment
    Example here is for setting up python 3 on Debin/Ubuntu/Mint.

    - Install python3 setuptools
      : $ sudo apt-get install python3-setuptools
    - Install pip
      : $ sudo apt-get install python3-pip
    - Install virtualwrapper
      : $ sudo -H pip3 install virtualenvwrapper
    - Setup python virtualenv (see below)
      : $ select_python3
    - Create python3 virtualenv
      : $ mkvirtualenv elpy3 -p /usr/bin/python3
    - The above step would do auto workon
      : $ workon elpy3
    - Install these packages via pip3.
      : $ pip3 install jedi
      : $ pip3 install flake8
      : $ pip3 install importmagic
      : $ pip3 install autopep8
      : $ pip3 install yapf
    - To deactivate current virtualenv
      : $ deactivate
    - For emacs elpy package
      : M-x pyvenv-workon elpy3
      : M-x elpy-config

    It's now ready. Always do =M-x pyvenv-workon elpy3= (or any venv you are working
    on) before you open any python project.
*** Keybindings
    In python mode, place the cursor on function name or macro of your interest:

    Leader key is:  =SPC m= (or shortcut with =,=)

    Available commands:

    #+BEGIN_SRC test
      "es" 'elpy-rgrep-symbol
      "eb" 'rgrep-display-buffer
      "ed" 'elpy-goto-definition
      "eu" 'pop-tag-mark
    #+END_SRC

** rtags layer (ttk-rtags)
   TBA
